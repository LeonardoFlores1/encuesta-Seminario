mtcars
mtcars$mpg
names(mtcars)
str(mtcars)
column_names
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/encuesta/")
column_names <- read.csv("column_names_a_tratar.csv", header = T, sep = ";", encoding = "UTF-8")
survey <- read.csv("encuesta_con_respuestas.csv", header = T, sep = ",", encoding = "UTF-8")
survey <- survey[,!(names(survey) %in% c("Marca.temporal"))]
column_names$traduccion <- as.character(column_names$traduccion)
names(survey) <- column_names$traduccion
head(survey$correo)
column_names
head(survey$correo)
head(survey)
write.csv(survey, "survey_cleaned.csv", row.names = F)
names(survey)
column_names
my.names
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/encuesta/")
survey <- read.csv("encuesta_con_respuestas.csv", header = T, sep = ",", encoding = "UTF-8") ##leyendo el doc de la encuesta con sus respuestas
my.names <- names(survey)  ##creando variable my.names para asignar nombres de las columnas
columnas_a_tratar <- my.names[!(my.names %in% c("Marca.temporal"))] ## otra variable donde s
df <- data.frame(columna.name = columnas_a_tratar)
columna_name
columna.name
columna.name
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/repositorio-git/encuesta-Seminario/")
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/repositorio-git/encuesta-Seminario/")
column_names <- read.csv("column_names_a_tratar.csv", header = T, sep = ";", encoding = "UTF-8") ##archivo csv con las columnas limpiadas
survey <- survey[,!(names(survey) %in% c("Marca.temporal"))]  #eliminando marca temporal
names(survey) <- column_names$traduccion  #se cambian los nombres de las columnas, por el nombre de las variables asignadas en column_names_a_tratar
write.csv(survey, "survey_cleaned.csv", row.names = F)  #se crea un nuevo csv
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/repositorio-git/encuesta-Seminario/")
survey <- read.csv("encuesta_con_respuestas.csv", header = T, sep = ",", encoding = "UTF-8") ##leyendo el doc de la encuesta con sus respuestas
my.names <- names(survey)  ##creando variable my.names para asignar nombres de las columnas de la encuesta
columnas_a_tratar <- my.names[!(my.names %in% c("Marca.temporal"))] ## variable columnas_a_tratar para asignar la encuesta pero quitando marca temporal
df <- data.frame(columna.name = columnas_a_tratar) ## se crea un dataframe
write.csv(df, "column_names.csv", row.names = FALSE) #creamos un archivo csv
columna.name
head(columnas_a_tratar)
columnas_a_tratar
names(columnas_a_tratar)
names(column_names)
names(survey)
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/repositorio-git/encuesta-Seminario/")
survey <- read.csv("encuesta_con_respuestas.csv", header = T, sep = ",", encoding = "UTF-8") ##leyendo el doc de la encuesta con sus respuestas
my.names <- names(survey)  ##creando variable my.names para asignar nombres de las columnas de la encuesta
columnas_a_tratar <- my.names[!(my.names %in% c("Marca.temporal"))] ## variable columnas_a_tratar para asignar la encuesta pero quitando marca temporal
df <- data.frame(columna.name = columnas_a_tratar) ## se crea un dataframe
write.csv(df, "column_names.csv", row.names = FALSE) #creamos un archivo csv
names(survey)
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/repositorio-git/encuesta-Seminario/")
column_names <- read.csv("column_names_a_tratar.csv", header = T, sep = ";", encoding = "UTF-8") ##archivo csv con las columnas limpiadas
survey <- read.csv("encuesta_con_respuestas.csv", header = T, sep = ",", encoding = "UTF-8") #archivo de encuesta original
survey <- survey[,!(names(survey) %in% c("Marca.temporal"))]  #eliminando marca temporal
column_names$traduccion <- as.character(column_names$traduccion)  #column_names contiene el csv para tratar las columnas
names(survey) <- column_names$traduccion  #se cambian los nombres de las columnas, por el nombre de las variables asignadas en column_names_a_tratar
head(survey)
write.csv(survey, "survey_cleaned.csv", row.names = F)  #se crea un nuevo csv
names(survey)
setwd("/")
setwd("Users/pc/unah/I P 2020/seminario/repositorio-git/encuesta-Seminario/")
survey <- read.csv("survey_cleaned.csv", sep = ",", header = T)
summary(survey)
nrow(survey)
summary(survey$hora_investigacion)
(survey$hora_investigacion)
table(survey$hora_investigacion)
prop.table(survey$hora_investigacion)
(survey$hora_investigacion)
table.(survey$hora_investigacion)
table(survey$hora_investigacion)
install.packages("dplyr")
str(survey)
table(survey$hora_investigacion) # muestra la frecuencia de las horas de investigacion
table(survey$practica_actualmente) # muestra la frecuencia de las horas de investigacion
table(survey$area_sistema_dominada) # muestra la frecuencia de las horas de investigacion
prop.table(survey$area_sistema_dominada) # muestra la frecuencia de las horas de investigacion
table(survey$area_sistema_dominada) # muestra la frecuencia de las horas de investigacion
table(survey$area_sistema_dominada) # muestra la frecuencia de las horas de investigacion
prop.table(table(survey$area_sistema_dominada)) # muestra la frecuencia de las horas de investigacion
prop.table(table(survey$practica_actualmente)) # muestra la frecuencia de las horas de investigacion
table(survey$practica_actualmente) # muestra la frecuencia de los estudiantes
prop.table(table(survey$practica_actualmente)) #muestra porcentajes
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
as.data.frame(prop.table(table(survey$practica_actualmente)))
library(dplyr)
df_perc <- as.data.frame(prop.table(table(survey$practica_actualmente)))
df_perc
df_perc %>% arrange()
boxplot(df_perc$Freq)
df_perc
df_perc <- as.data.frame(prop.table(table(survey$practica_actualmente))*100)#asignamos el resultado de la linea anterior a la variable df
df_perc <- df_perc %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
df_perc
boxplot
boxplot(df_perc$Freq)
hist(df_perc$Freq)
survey$practica_actualmente <- as.factor(survey$practica_actualmente)
hist(df_perc$Freq)
boxplot(df_perc$Freq)
df_perc <- df_perc %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
df_perc
hist(df_perc$Freq)
hist(df_perc$Freq)*100
hist(df_perc$Freq)
qqnorm(df_perc$Freq)
hist(df_perc$Freq)
boxplot(df_perc$Freq)
View(df_perc)
#-------------------------------------------Practica en primera opcion---------------------------------------
survey$practica_actualmente <- as.factor(survey$practica_primera_opcion)
table(survey$practica_actualmente)
table(survey$practica_actualmente)
table(survey$practica_actualmente)
table(survey$practica_primera_opcion)
#-------------------------------------------Practica en primera opcion---------------------------------------
survey$practica_primera_opcion <- as.factor(survey$practica_primera_opcion)
table(survey$practica_primera_opcion)
table(survey$practica_actualmente)
df_perc
table(survey$practica_actualmente)
survey$practica_actualmente <- as.factor(survey$practica_actualmente)
table(survey$practica_actualmente) # muestra la frecuencia de los estudiantes
survey <- read.csv("survey_cleaned.csv", sep = ",", header = T)
survey$practica_actualmente <- as.factor(survey$practica_actualmente)
table(survey$practica_actualmente) # muestra la frecuencia de los estudiantes
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
as.data.frame(prop.table(table(survey$practica_actualmente))) # devuelve la info en forma de columna
df_perc <- as.data.frame(prop.table(table(survey$practica_actualmente))*100)#asignamos el resultado de la linea anterior a la variable df
library(dplyr) #carga la ibreria
df_perc <- df_perc %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
df_perc
#-------------------------------------------Practica en primera opcion---------------------------------------
survey$practica_primera_opcion <- as.factor(survey$practica_primera_opcion)
table(survey$practica_primera_opcion)
hist(df_perc$Freq)
table(survey$practica_actualmente)
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
survey <- read.csv("survey_cleaned.csv", sep = ",", header = T)
df_perc <- as.data.frame(prop.table(table(survey$practica_actualmente))*100)#asignamos el resultado de la linea anterior a la variable df
df_perc <- df_perc %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
df_perc
boxplot(df_perc$Freq)
hist(df_perc$Freq)
df_perc <- as.data.frame(prop.table(table(survey$practica_actualmente)))#asignamos el resultado de la linea anterior a la variable df
df_perc <- df_perc %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
df_perc
boxplot(df_perc$Freq)
hist(df_perc$Freq)
table(survey$practica_primera_opcion)
qqnorm(df_perc$Freq)
prop.table(table(survey$practica_primera_opcion))
as.data.frame(prop.table(table(survey$practica_primera_opcion)))
df2_perc <- as.data.frame(prop.table(table(survey$practica_primera_opcion)))
View(df2_perc)
df2_perc <- df2_perc %>% arrange(-Freq)
df2_perc
library(dplyr) #carga la ibreria
bloxplot(df2_perc)
boxplot(df2_perc)
boxplot(df2_perc$Freq)
hist(df2_perc$Freq)
#-------------------------------------------Practica en primera opcion---------------------------------------
survey$practica_primera_opcion <- as.factor(survey$practica_primera_opcion)
hist(df2_perc$Freq)
table(survey$practica_primera_opcion)
as.data.frame(prop.table(table(survey$practica_primera_opcion)))
df2_perc <- as.data.frame(prop.table(table(survey$practica_primera_opcion)))
df2_perc <- df2_perc %>% arrange(-Freq)
boxplot(df2_perc$Freq)
hist(df2_perc$Freq)
#-------------------------------------------columna practica cursando clases--------------------------------------------
survey$practica_cursando_clases <- as.factor(survey$practica_cursando_clases)
table(survey$practica_cursando_clases)
prop.table(table(survey$practica_cursando_clases))
as.data.frame(prop.table(table(survey$practica_cursando_clases)))
df3_perc <- as.data.frame(prop.table(table(survey$practica_cursando_clases)))
df3_perc <- df3_perc %>% arrange(-Freq)
boxplot(df3_perc$Freq)
hist(df3_perc$Freq)
#-------------------------------------------columna practica cursando clases--------------------------------------------
survey$practica_cursando_clases <- as.factor(survey$practica_cursando_clases)
table(survey$practica_cursando_clases)
prop.table(table(survey$practica_cursando_clases))
as.data.frame(prop.table(table(survey$practica_cursando_clases)))
df3_perc <- as.data.frame(prop.table(table(survey$practica_cursando_clases)))
df3_perc <- df3_perc %>% arrange(-Freq)
boxplot(df3_perc$Freq)
hist(df3_perc$Freq)
View(df3_perc)
View(df3_perc)
survey <- read.csv("survey_cleaned.csv", sep = ",", header = T)
survey$practica_actualmente <- as.factor(survey$practica_actualmente)
table(survey$practica_actualmente) # muestra la frecuencia de los estudiantes
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
as.data.frame(prop.table(table(survey$practica_actualmente))) # devuelve la info en forma de columna
df_perc_practica_actualmente <- as.data.frame(prop.table(table(survey$practica_actualmente)))#asignamos el resultado de la linea anterior a la variable df
library(dplyr) #carga la ibreria
df_perc_practica_actualmente <- df_perc %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
boxplot(df_perc_practica_actualmente$Freq)
hist(df_perc_practica_actualmente$Freq)
qqnorm(df_perc_practica_actualmente$Freq)
View(df_perc_practica_actualmente)
View(df_perc_practica_actualmente)
survey$practica_actualmente <- as.factor(survey$practica_actualmente)
table(survey$practica_actualmente) # muestra la frecuencia de los estudiantes
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
as.data.frame(prop.table(table(survey$practica_actualmente))) # devuelve la info en forma de columna
df_perc_practica_actualmente <- as.data.frame(prop.table(table(survey$practica_actualmente)))#asignamos el resultado de la linea anterior a la variable df
library(dplyr) #carga la ibreria
df_perc_practica_actualmente <- df_perc_practica_actualmente %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
boxplot(df_perc_practica_actualmente$Freq)
hist(df_perc_practica_actualmente$Freq)
qqnorm(df_perc_practica_actualmente$Freq)
df_perc_practica_actualmente
#-------------------------------------------columna de Practica en primera opcion---------------------------------------
survey$practica_primera_opcion <- as.factor(survey$practica_primera_opcion)
table(survey$practica_primera_opcion)
prop.table(table(survey$practica_primera_opcion))
as.data.frame(prop.table(table(survey$practica_primera_opcion)))
df_perc_primera_opcion <- as.data.frame(prop.table(table(survey$practica_primera_opcion)))
df_perc_primera_opcion <- df_perc_primera_opcion %>% arrange(-Freq)
boxplot(df_perc_primera_opcion$Freq)
hist(df_perc_primera_opcion$Freq)
View(df_perc_primera_opcion)
View(df_perc_primera_opcion)
#-------------------------------------------columna practica cursando clases--------------------------------------------
survey$practica_cursando_clases <- as.factor(survey$practica_cursando_clases)
table(survey$practica_cursando_clases)
prop.table(table(survey$practica_cursando_clases))
as.data.frame(prop.table(table(survey$practica_cursando_clases)))
df_perc_cursa_clases <- as.data.frame(prop.table(table(survey$practica_cursando_clases)))
df_perc_cursa_clases <- df_perc_cursa_clases %>% arrange(-Freq)
boxplot(df_perc_cursa_clases$Freq)
hist(df_perc_cursa_clases$Freq)
df_perc_cursa_clases
View(df_perc_cursa_clases)
View(df_perc_cursa_clases)
df_perc_practica_actualmente
df_perc_primera_opcion
df_perc_cursa_clases
#----------------------------------------------columna Rango indice-----------------------------------------------
survey$rango_indice
#----------------------------------------------columna Rango indice-----------------------------------------------
summary(survey$rango_indice)
#----------------------------------------------columna Rango indice-----------------------------------------------
table(survey$rango_indice)
#----------------------------------------------columna Rango indice-----------------------------------------------
survey$rango_indice <- as.factor(survey$rango_indice)
table(survey$rango_indice)
prop.table(table(survey$rango_indice))
as.data.frame(prop.table(table(survey$rango_indice)))
df_perc_rango_indice <- as.data.frame(prop.table(table(survey$rango_indice)))
df_perc_rango_indice <- df_perc_rango_indice %>% arrange(-Freq)
df_perc_rango_indice
boxplot(df_perc_rango_indice$Freq)
hist(df_perc_rango_indice$Freq)
qqnorm(df_perc_primera_opcion$Freq)
qqnorm(df_perc_cursa_clases$Freq)
hist(df_perc_cursa_clases$Freq)
qqnorm(df_perc_cursa_clases$Freq)
qqnorm(df_perc_rango_indice$Freq)
survey$rendimiento_academico
#----------------------------------------------columna rendimiento academico-------------------------------------
survey$rendimiento_academico <- as.factor(survey$rendimiento_academico)
table(survey$rendimiento_academico)
prop.table(table(survey$rendimiento_academico))
#----------------------------------------------columna rendimiento academico-------------------------------------
survey$rendimiento_academico <- as.factor(survey$rendimiento_academico)
table(survey$rendimiento_academico)
prop.table(table(survey$rendimiento_academico))
as.data.frame(prop.table(table(survey$rendimiento_academico)))
df_perc_rendimiento_academico <- as.data.frame(prop.table(table(survey$rendimiento_academico)))
df_perc_rendimiento_academico <- df_perc_rendimiento_academico %>% arrange(-Freq)
df_perc_rendimiento_academico
boxplot(df_perc_rendimiento_academico$Freq)
hist(df_perc_rendimiento_academico$Freq)
qqnorm(df_perc_rendimiento_academico$Freq)
hist(df_perc_rango_indice$Freq)
hist(df_perc_rendimiento_academico$Freq)
View(df_perc_rango_indice)
View(df_perc_rango_indice)
View(df_perc_rendimiento_academico)
View(df_perc_rendimiento_academico)
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
as.data.frame(prop.table(table(survey$practica_actualmente))) # devuelve la info en forma de columna
df_perc_practica_actualmente <- as.data.frame(prop.table(table(survey$practica_actualmente)))#asignamos el resultado de la linea anterior a la variable df
df_perc_practica_actualmente
df_perc_practica_actualmente <- as.data.frame(prop.table(table(survey$practica_actualmente))*100)#asignamos el resultado de la linea anterior a la variable df
df_perc_primera_opcion <- as.data.frame(prop.table(table(survey$practica_primera_opcion))*100)
ases))*100)
df_perc_cursa_clases <- as.data.frame(prop.table(table(survey$practica_cursando_clases))*100)
df_perc_rango_indice <- as.data.frame(prop.table(table(survey$rango_indice))*100)
df_perc_rendimiento_academico <- as.data.frame(prop.table(table(survey$rendimiento_academico))*100)
df_perc_rendimiento_academico <- df_perc_rendimiento_academico %>% arrange(-Freq)
df_perc_rango_indice <- df_perc_rango_indice %>% arrange(-Freq)
df_perc_rango_indice
qqnorm(df_perc_rendimiento_academico$Freq)
df_perc_cursa_clases <- df_perc_cursa_clases %>% arrange(-Freq)
table(survey$practica_primera_opcion)
table(survey$practica_primera_opcion)
#-----------------------------------------------tratamiento na---------------------------------------------------
summary(survey)
print
for(myname in names(survey)){
print(myname)
}
for(myname in names(survey)){
print(myname)
print(head(survey[,myname]))
}
for(myname in names(survey)){
print(myname)
print(is.na(survey[,myname]))
}
survey$practica_primera_opcion
is.na(survey$practica_primera_opcion)
table(survey$practica_primera_opcion))
table(survey$practica_primera_opcion)
is.na(survey$practica_primera_opcion)
!(is.na(survey$practica_primera_opcion))
is.na(survey$practica_primera_opcion)
if (survey$practica_primera_opcion = "") {
print("si hay")
}
if(survey$practica_primera_opcion = ""){
print(survey$practica_actualmente)
}
if(survey$practica_primera_opcion = ""){
print("si hay")
}
for (mn in survey$practica_primera_opcion) {
if(survey$practica_primera_opcion = ""){
mn = mn + 1
print(mn)
}
}
for (mn in survey$practica_primera_opcion) {
if(survey$practica_primera_opcion == ""){
mn = mn + 1
print(mn)
}
}
for (mn in survey$practica_primera_opcion) {
if(survey$practica_primera_opcion == ""){
mn <- mn + 1
print(mn)
}
}
for (mn in survey$practica_primera_opcion) {
if(survey$practica_primera_opcion == ""){
m <- m + 1
print(mn)
}
}
for (mn in survey$practica_primera_opcion) {
if(survey$practica_primera_opcion == ""){
m = m + 1
print(mn)
}
}
for (mn in survey$practica_primera_opcion) {
if(survey$practica_primera_opcion == ""){
m = m + 1
print(m)
}
}
df_perc_primera_opcion
df_perc_primera_opcion[df_perc_primera_opcion$Var1 %in% c(""),] <- ""
df_perc_primera_opcion
is.na(survey$practica_primera_opcion)
survey <- read.csv("survey_cleaned.csv", sep = ",", header = T)
survey$practica_actualmente <- as.factor(survey$practica_actualmente)
table(survey$practica_actualmente) # muestra la frecuencia de los estudiantes
prop.table(table(survey$practica_actualmente))*100 #muestra porcentajes de las frecuencias
as.data.frame(prop.table(table(survey$practica_actualmente))) # devuelve la info en forma de columna
df_perc_practica_actualmente <- as.data.frame(prop.table(table(survey$practica_actualmente))*100)#asignamos el resultado de la linea anterior a la variable df
library(dplyr) #carga la ibreria
df_perc_practica_actualmente <- df_perc_practica_actualmente %>% arrange(-Freq) #ordena los datos en orden descendente con el signo (-) y lo deja guardado en df_perc
boxplot(df_perc_practica_actualmente$Freq)
hist(df_perc_practica_actualmente$Freq)
qqnorm(df_perc_practica_actualmente$Freq)
#-------------------------------------------columna de Practica en primera opcion---------------------------------------
survey$practica_primera_opcion <- as.factor(survey$practica_primera_opcion)
table(survey$practica_primera_opcion)
prop.table(table(survey$practica_primera_opcion))
as.data.frame(prop.table(table(survey$practica_primera_opcion)))
df_perc_primera_opcion <- as.data.frame(prop.table(table(survey$practica_primera_opcion))*100)
df_perc_primera_opcion <- df_perc_primera_opcion %>% arrange(-Freq)
boxplot(df_perc_primera_opcion$Freq)
hist(df_perc_primera_opcion$Freq)
qqnorm(df_perc_primera_opcion$Freq)
df_perc_primera_opcion
